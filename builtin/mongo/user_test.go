package mongo_test

import (
	"time"

	"github.com/elos/data"
	"gopkg.in/mgo.v2/bson"
)

const UserKind data.Kind = "user"

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type User struct {
	ActionsIDs            []string  `json:"actions_ids" bson:"actions_ids"`
	CalendarID            string    `json:"calendar_id" bson:"calendar_id"`
	CreatedAt             time.Time `json:"created_at" bson:"created_at"`
	CurrentActionableID   string    `json:"current_actionable_id" bson:"current_actionable_id"`
	CurrentActionableKind string    `json:"current_actionable_kind" bson:"current_actionable_kind"`
	EventsIDs             []string  `json:"events_ids" bson:"events_ids"`
	Id                    string    `json:"id" bson:"_id,omitempty"`
	Key                   string    `json:"key" bson:"key"`
	Name                  string    `json:"name" bson:"name"`
	OntologyID            string    `json:"ontology_id" bson:"ontology_id"`
	RoutinesIDs           []string  `json:"routines_ids" bson:"routines_ids"`
	TasksIDs              []string  `json:"tasks_ids" bson:"tasks_ids"`
	UpdatedAt             time.Time `json:"updated_at" bson:"updated_at"`
}

func NewUser() *User {
	return &User{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (user *User) Kind() data.Kind {
	return UserKind
}

// just returns itself for now
func (user *User) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = user.ID()
	return foo
}

func (user *User) SetID(id data.ID) {
	user.Id = id.String()
}

func (user *User) ID() data.ID {
	return data.ID(user.Id)
}

// BSON {{{
func (user *User) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Key string `json:"key" bson:"key"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ActionsIDs []string `json:"actions_ids" bson:"actions_ids"`

		CalendarID string `json:"calendar_id" bson:"calendar_id"`

		CurrentActionableID string `json:"current_actionable_id" bson:"current_actionable_id"`

		CurrentActionableKind string `json:"current_actionable_kind" bson:"current_actionable_kind"`

		EventsIDs []string `json:"events_ids" bson:"events_ids"`

		OntologyID string `json:"ontology_id" bson:"ontology_id"`

		RoutinesIDs []string `json:"routines_ids" bson:"routines_ids"`

		TasksIDs []string `json:"tasks_ids" bson:"tasks_ids"`
	}{

		CreatedAt: user.CreatedAt,

		Key: user.Key,

		Name: user.Name,

		UpdatedAt: user.UpdatedAt,

		ActionsIDs: user.ActionsIDs,

		CalendarID: user.CalendarID,

		CurrentActionableID: user.CurrentActionableID,

		CurrentActionableKind: user.CurrentActionableKind,

		EventsIDs: user.EventsIDs,

		OntologyID: user.OntologyID,

		RoutinesIDs: user.RoutinesIDs,

		TasksIDs: user.TasksIDs,
	}, nil

}

func (user *User) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Key string `json:"key" bson:"key"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ActionsIDs []string `json:"actions_ids" bson:"actions_ids"`

		CalendarID string `json:"calendar_id" bson:"calendar_id"`

		CurrentActionableID string `json:"current_actionable_id" bson:"current_actionable_id"`

		CurrentActionableKind string `json:"current_actionable_kind" bson:"current_actionable_kind"`

		EventsIDs []string `json:"events_ids" bson:"events_ids"`

		OntologyID string `json:"ontology_id" bson:"ontology_id"`

		RoutinesIDs []string `json:"routines_ids" bson:"routines_ids"`

		TasksIDs []string `json:"tasks_ids" bson:"tasks_ids"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	user.CreatedAt = tmp.CreatedAt

	user.Id = tmp.Id.Hex()

	user.Key = tmp.Key

	user.Name = tmp.Name

	user.UpdatedAt = tmp.UpdatedAt

	user.ActionsIDs = tmp.ActionsIDs

	user.CalendarID = tmp.CalendarID

	user.CurrentActionableID = tmp.CurrentActionableID

	user.CurrentActionableKind = tmp.CurrentActionableKind

	user.EventsIDs = tmp.EventsIDs

	user.OntologyID = tmp.OntologyID

	user.RoutinesIDs = tmp.RoutinesIDs

	user.TasksIDs = tmp.TasksIDs

	return nil

}

// BSON }}}
